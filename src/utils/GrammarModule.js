const TinySegmenter = require("tiny-segmenter");
const tinySegmenter = new TinySegmenter();

const GramarDict = {
  すいませんが: "誠に恐縮ですが",
  対応: "ご対応",
  忙しい中: "お忙しい中",
  ありがとう: "誠にありがとうございます",
  その時: "その際",
  ほしいです: "頂きたく存じます",
  欲しいです: "頂きたく存じます",
  返信: "ご連絡",
  ご苦労さまです: "お疲れさまです",
  しばらくぶりです: "ご無沙汰しております",
  お世話様です: "お世話になっております",
  お体をご自愛くださいませ: "ご自愛ください",
  つまらないものですが: "ほんの気持ち程度ですが",
  厚くお詫び申し上げます: "深くお詫び申し上げます",
  了解しました: "承知しました",
  なるほど: "おっしゃる通りだと思います",
  おわかりいただけたでしょうか: "ご不明な点はございませんか",
  一緒に参りましょう: "お供致します",
  花に水をあげる: "花に水をやる",
  来られますか: "いらっしゃいますか",
  なんですけど: "なのですが",
  どうしましょうか: "いかが致しましょう",
  お召し上がりください: "召し上がってください",
  ご持参ください: "お持ちください",
  おっしゃられる通りだと思います: "おっしゃる通りだと思います",
  ご覧になられる: "ご覧になる",
  資料は拝見されましたか: "資料はご覧いただけましたか",
  お送りさせていただきます: "お送り致します",
  役不足です: "力不足です",
  査収しました: "確認致しました",
  ご拝受いただければ: "お受け取りいただければ",
  拝見致しました: "拝見しました",
  お受け取り致しました: "受け取りました",
  ご利用できません: "ご利用いただけません",
  お求めやすい商品です: "お求めになりやすい商品です",
  どうか致しましたか: "どうかなさいましたか",
  様でございますね: "様でいらっしゃいますね",
  拝見させていただきました: "拝見致しました",
  になります: "でございます",
  お座りください: "お掛けください",
  申されていました: "おっしゃいました",
  お越しになられました: "お見えになりました",
  参られています: "お見えです",
  本日は休みをいただいております: "休みを取っております",
  お連れしました: "ご案内しました",
  お伺いします: "伺います",
  ご一緒します: "お供致します",
  すみません: "申し訳ございません",
  すいません: "申し訳ございません",
  とんでもございません: "とんでもないことです",
  参考になりました: "勉強になりました",
  分かりません: "存じ上げません",
  大丈夫です: "結構です",
  構いません: "結構です",
  ご注意してください: "ご注意ください",
  これで結構でしょうか: "これでよろしいでしょうか",
  どうしますか: "いかがなさいますか",
  うかがっていますか: "お聞きになっていますか",
  ご確認してください: "ご確認ください",
  おられますか: "いらっしゃいますか",
  どちらに致しますか: "どちらになさいますか",
  わが社: "弊社",
  当社: "弊社",
  どちら様でしょうか: "お名前をお聞かせいただけますでしょうか",
  各位様: "各位",
  お名前をちょうだいできますか: "お名前をうかがってもよろしいですか",
  打ち合わせ: "お打ち合わせ",
  くれまして: "いただきまして",
  された: "いただいた",
  見積り: "お見積り",
  用意: "ご用意",
  聞いた: "伺った",
  要望: "ご要望",
  説明: "ご説明",
  がほしいのですが: "をいただきたいのですが",
  ください: "いただけないでしょうか",
  行く: "伺う",
  会います: "お会いします",
  後で: "後ほど",
  いかがいたしましょうか: "いかがなさいますか",
  行きます: "伺います",
  行かせていただきます: "伺います",
  居ます: "おります",
  いらっしゃられる: "いらっしゃる",
  伺っていますか: "ご存知ですか",
  おいでになられる: "おいでになる",
  お帰りになられる: "お帰りになる",
  お身体をご自愛くださいませ: "ご自愛くださいませ",
  お聞きになられましたか: "お聞きになりましたか",
  教えてください: "ご教授ください",
  お時間よろしかったでしょうか: "お時間をいただいてもよろしいですか",
  おっしゃられる: "おっしゃる",
  お伝えしておきます: "申し伝えておきます",
  お見えになられました: "お見えになりました",
  お戻りになられますか: "お戻りになりますか",
  聞きました: "伺いました",
  結構でしょうか: "よろしいでしょうか",
  ご承知おきください: "お含みおきください",
  ご賞味ください: "お召し上がりください",
  こちらになります: "こちらでございます",
  ご拝受: "拝受",
  ごめんなさい: "申し訳ございません",
  ご利用になられる: "ご利用になる",
  さっき: "先ほど",
  知っています: "存じております",
  してもらっていいですか: "してくださいますか",
  食べました: "いただきました",
  ちょっと待ってください: "少々お待ちください",
  どうかいたしましたか: "いかがなさいましたか",
  どちらにいたしますか: "どちらになさいますか",
  どちらへ参られますか: "どちらへ行かれますか",
  どれにいたしますか: "どれになさいますか",
  なるほどです: "おっしゃる通りです",
  別にいいですよ: "問題ございません",
  見ました: "拝見しました",
  参らせていただきます: "参ります",
  申し上げておきます: "申し伝えておきます",
  もらいました: "いただきました"
};

function ConvertText(targetSegments) {
  let segments = tinySegmenter.segment(targetSegments);
  // console.log(segments);
  let GramarText = "";
  let tempText = "";
  let Flag = false;
  for (const TargetKey in segments) {
    // ここに校正処理を記述
    if (Flag) {
      tempText += segments[TargetKey]; // 結合待機状態であれば結合
    } else {
      tempText = segments[TargetKey]; // そうでなければ新しい値を代入
    }
    Flag = false; // デフォルトでは結合状態を解除している
    for (const GramarKey in GramarDict) {
      if ((GramarKey + "").startsWith(tempText)) {
        // 前方一致判定
        Flag = true; // 結合状態フラグを立てる
        if (GramarKey + "" === tempText + "") {
          // 完全一致判定
          tempText = GramarDict[GramarKey]; // 代入用文字列を校正後に置換する
          Flag = false; // 結合状態フラグを解除
        }
        break;
      }
    }
    if (!Flag) {
      GramarText += tempText;
    }
  }
  console.log(GramarText);
  return GramarText;
}

export default { ConvertText };
